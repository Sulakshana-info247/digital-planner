{"ast":null,"code":"var _jsxFileName = \"D:\\\\sulakshana_workspace\\\\react_apps\\\\digital-planner\\\\client\\\\src\\\\components\\\\Goals.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Goals = () => {\n  _s();\n  const [goal, setGoal] = useState('');\n  const handleGoalChange = e => {\n    setGoal(e.target.value);\n  };\n  useEffect(() => {\n    // Fetch goals from the backend when the component mounts\n    fetchGoals();\n  }, []); // Empty dependency array ensures this effect runs only once\n\n  const fetchGoals = async () => {\n    try {\n      const response = await fetch('/api/goals');\n      if (response.ok) {\n        const data = await response.json();\n        setGoals(data);\n      } else {\n        console.error('Failed to fetch goals');\n      }\n    } catch (error) {\n      console.error('Error fetching goals:', error);\n    }\n  };\n  const saveGoal = async () => {\n    try {\n      // Make a POST request to add a new goal\n      const response = await fetch('/api/goals', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          text: newGoal\n        })\n      });\n      if (response.ok) {\n        console.log('Goal added successfully');\n        // Fetch goals again after adding a new goal\n        fetchGoals();\n        // Optionally, you can reset the form or update the UI as needed\n        setNewGoal('');\n      } else {\n        console.error('Failed to add goal');\n      }\n    } catch (error) {\n      console.error('Error adding goal:', error);\n    }\n    console.log('Saving Goal:', goal);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"Goals\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Goals and Targets\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      value: goal,\n      onChange: handleGoalChange,\n      placeholder: \"Set your goal...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: saveGoal,\n      children: \"Set Goal\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 5\n  }, this);\n};\n_s(Goals, \"a7udzfHrrza5Ig4oCYqhsFjzCGQ=\");\n_c = Goals;\nexport default Goals;\nvar _c;\n$RefreshReg$(_c, \"Goals\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","Goals","_s","goal","setGoal","handleGoalChange","e","target","value","useEffect","fetchGoals","response","fetch","ok","data","json","setGoals","console","error","saveGoal","method","headers","body","JSON","stringify","text","newGoal","log","setNewGoal","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","onChange","placeholder","onClick","_c","$RefreshReg$"],"sources":["D:/sulakshana_workspace/react_apps/digital-planner/client/src/components/Goals.js"],"sourcesContent":["import React, { useState } from 'react';\r\n\r\nconst Goals = () => {\r\n  const [goal, setGoal] = useState('');\r\n\r\n  const handleGoalChange = (e) => {\r\n    setGoal(e.target.value);\r\n  };\r\n\r\n  useEffect(() => {\r\n    // Fetch goals from the backend when the component mounts\r\n    fetchGoals();\r\n  }, []); // Empty dependency array ensures this effect runs only once\r\n\r\n  const fetchGoals = async () => {\r\n    try {\r\n      const response = await fetch('/api/goals');\r\n      if (response.ok) {\r\n        const data = await response.json();\r\n        setGoals(data);\r\n      } else {\r\n        console.error('Failed to fetch goals');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error fetching goals:', error);\r\n    }\r\n  };\r\n\r\n\r\n  const saveGoal = async () => {\r\n    try {\r\n      // Make a POST request to add a new goal\r\n      const response = await fetch('/api/goals', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({ text: newGoal }),\r\n      });\r\n\r\n      if (response.ok) {\r\n        console.log('Goal added successfully');\r\n        // Fetch goals again after adding a new goal\r\n        fetchGoals();\r\n        // Optionally, you can reset the form or update the UI as needed\r\n        setNewGoal('');\r\n      } else {\r\n        console.error('Failed to add goal');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error adding goal:', error);\r\n    }\r\n    console.log('Saving Goal:', goal);\r\n  };\r\n\r\n  return (\r\n    <div className='Goals'>\r\n      <h2>Goals and Targets</h2>\r\n      <input\r\n        type=\"text\"\r\n        value={goal}\r\n        onChange={handleGoalChange}\r\n        placeholder=\"Set your goal...\"\r\n      />\r\n      <br />\r\n      <button onClick={saveGoal}>Set Goal</button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Goals;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAExC,MAAMC,KAAK,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAClB,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGN,QAAQ,CAAC,EAAE,CAAC;EAEpC,MAAMO,gBAAgB,GAAIC,CAAC,IAAK;IAC9BF,OAAO,CAACE,CAAC,CAACC,MAAM,CAACC,KAAK,CAAC;EACzB,CAAC;EAEDC,SAAS,CAAC,MAAM;IACd;IACAC,UAAU,CAAC,CAAC;EACd,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;;EAER,MAAMA,UAAU,GAAG,MAAAA,CAAA,KAAY;IAC7B,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,YAAY,CAAC;MAC1C,IAAID,QAAQ,CAACE,EAAE,EAAE;QACf,MAAMC,IAAI,GAAG,MAAMH,QAAQ,CAACI,IAAI,CAAC,CAAC;QAClCC,QAAQ,CAACF,IAAI,CAAC;MAChB,CAAC,MAAM;QACLG,OAAO,CAACC,KAAK,CAAC,uBAAuB,CAAC;MACxC;IACF,CAAC,CAAC,OAAOA,KAAK,EAAE;MACdD,OAAO,CAACC,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;IAC/C;EACF,CAAC;EAGD,MAAMC,QAAQ,GAAG,MAAAA,CAAA,KAAY;IAC3B,IAAI;MACF;MACA,MAAMR,QAAQ,GAAG,MAAMC,KAAK,CAAC,YAAY,EAAE;QACzCQ,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACP,cAAc,EAAE;QAClB,CAAC;QACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UAAEC,IAAI,EAAEC;QAAQ,CAAC;MACxC,CAAC,CAAC;MAEF,IAAIf,QAAQ,CAACE,EAAE,EAAE;QACfI,OAAO,CAACU,GAAG,CAAC,yBAAyB,CAAC;QACtC;QACAjB,UAAU,CAAC,CAAC;QACZ;QACAkB,UAAU,CAAC,EAAE,CAAC;MAChB,CAAC,MAAM;QACLX,OAAO,CAACC,KAAK,CAAC,oBAAoB,CAAC;MACrC;IACF,CAAC,CAAC,OAAOA,KAAK,EAAE;MACdD,OAAO,CAACC,KAAK,CAAC,oBAAoB,EAAEA,KAAK,CAAC;IAC5C;IACAD,OAAO,CAACU,GAAG,CAAC,cAAc,EAAExB,IAAI,CAAC;EACnC,CAAC;EAED,oBACEH,OAAA;IAAK6B,SAAS,EAAC,OAAO;IAAAC,QAAA,gBACpB9B,OAAA;MAAA8B,QAAA,EAAI;IAAiB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAC1BlC,OAAA;MACEmC,IAAI,EAAC,MAAM;MACX3B,KAAK,EAAEL,IAAK;MACZiC,QAAQ,EAAE/B,gBAAiB;MAC3BgC,WAAW,EAAC;IAAkB;MAAAN,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC/B,CAAC,eACFlC,OAAA;MAAA+B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,eACNlC,OAAA;MAAQsC,OAAO,EAAEnB,QAAS;MAAAW,QAAA,EAAC;IAAQ;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACzC,CAAC;AAEV,CAAC;AAAChC,EAAA,CAlEID,KAAK;AAAAsC,EAAA,GAALtC,KAAK;AAoEX,eAAeA,KAAK;AAAC,IAAAsC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}