{"ast":null,"code":"var _jsxFileName = \"D:\\\\sulakshana_workspace\\\\react_apps\\\\digital-planner\\\\client\\\\src\\\\components\\\\Goals.js\",\n  _s = $RefreshSig$();\n// client/src/components/Goals.js\nimport React, { useState, useEffect } from 'react';\nimport { format } from \"date-fns\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Goals = () => {\n  _s();\n  const [newGoal, setNewGoal] = useState('');\n  const [targetDate, setTargetDate] = useState('');\n  const [goals, setGoals] = useState([]);\n  const URL = 'http://localhost:3001';\n  useEffect(() => {\n    // Fetch goals from the backend when the component mounts\n    fetchGoals();\n  }, []); // Empty dependency array ensures this effect runs only once\n\n  const fetchGoals = async () => {\n    try {\n      const response = await fetch(`${URL}/api/goals`);\n      if (response.ok) {\n        const data = await response.json();\n        setGoals(data);\n      } else {\n        console.error('Failed to fetch goals');\n      }\n    } catch (error) {\n      console.error('Error fetching goals:', error);\n    }\n  };\n  const handleAddGoal = async () => {\n    try {\n      // Make a POST request to add a new goal\n      const response = await fetch(`${URL}/api/goals`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          text: newGoal,\n          targetDate: format(targetDate, parse(\"MMMM dd, yyyy\"))\n        })\n      });\n      if (response.ok) {\n        console.log('Goal added successfully');\n        // Fetch goals again after adding a new goal\n        fetchGoals();\n        // Optionally, you can reset the form or update the UI as needed\n        setNewGoal('');\n        setTargetDate('');\n      } else {\n        console.error('Failed to add goal');\n      }\n    } catch (error) {\n      console.error('Error adding goal:', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"Goals\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Set your Goals and time to track your progress \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Enter your goal\",\n        value: newGoal,\n        onChange: e => setNewGoal(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"date\",\n        value: targetDate,\n        onChange: e => setTargetDate(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 10\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleAddGoal,\n        children: \"Add Goal\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: goals.map(goal => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [goal.text, \"  - \", goal.targetDate]\n      }, goal._id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 5\n  }, this);\n};\n_s(Goals, \"JRUQklTCopNiOgMbmIGYwfTAeTs=\");\n_c = Goals;\nexport default Goals;\nvar _c;\n$RefreshReg$(_c, \"Goals\");","map":{"version":3,"names":["React","useState","useEffect","format","jsxDEV","_jsxDEV","Goals","_s","newGoal","setNewGoal","targetDate","setTargetDate","goals","setGoals","URL","fetchGoals","response","fetch","ok","data","json","console","error","handleAddGoal","method","headers","body","JSON","stringify","text","parse","log","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","placeholder","value","onChange","e","target","onClick","map","goal","_id","_c","$RefreshReg$"],"sources":["D:/sulakshana_workspace/react_apps/digital-planner/client/src/components/Goals.js"],"sourcesContent":["// client/src/components/Goals.js\r\nimport React, { useState, useEffect } from 'react';\r\nimport { format } from \"date-fns\";\r\n\r\nconst Goals = () => {\r\n  const [newGoal, setNewGoal] = useState('');\r\n  const [targetDate, setTargetDate] = useState('');\r\n  const [goals, setGoals] = useState([]);\r\n  const URL = 'http://localhost:3001';\r\n\r\n  useEffect(() => {\r\n    // Fetch goals from the backend when the component mounts\r\n    fetchGoals();\r\n  }, []); // Empty dependency array ensures this effect runs only once\r\n\r\n  \r\n  const fetchGoals = async () => {\r\n    try {\r\n      const response = await fetch(`${URL}/api/goals`);\r\n      if (response.ok) {\r\n        const data = await response.json();\r\n        setGoals(data);\r\n      } else {\r\n        console.error('Failed to fetch goals');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error fetching goals:', error);\r\n    }\r\n  };\r\n\r\n  const handleAddGoal = async () => {\r\n    try {\r\n      // Make a POST request to add a new goal\r\n      const response = await fetch(`${URL}/api/goals`, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({ text: newGoal , targetDate: format(targetDate, parse(\"MMMM dd, yyyy\")) }),\r\n      });\r\n\r\n      if (response.ok) {\r\n        console.log('Goal added successfully');\r\n        // Fetch goals again after adding a new goal\r\n        fetchGoals();\r\n        // Optionally, you can reset the form or update the UI as needed\r\n        setNewGoal('');\r\n        setTargetDate('');\r\n      } else {\r\n        console.error('Failed to add goal');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error adding goal:', error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className='Goals'>\r\n      <h2>Set your Goals and time to track your progress </h2>\r\n      <div>\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"Enter your goal\"\r\n          value={newGoal}\r\n          onChange={(e) => setNewGoal(e.target.value)}\r\n        />\r\n         <input\r\n          type=\"date\"\r\n          value={targetDate}\r\n          onChange={(e) => setTargetDate(e.target.value)}\r\n        />\r\n        <button onClick={handleAddGoal}>Add Goal</button>\r\n      </div>\r\n      <ul>\r\n        {goals.map((goal) => (\r\n          <li key={goal._id}>{goal.text}  - {goal.targetDate}</li>\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Goals;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}